{"version":3,"sources":["components/search_box/SearchBox.js","components/robot/Robot.js","components/robot_list/RobotList.js","components/scroll/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchRobot","className","type","placeholder","onChange","Robot","robot","src","id","alt","name","email","RobotList","newRobotList","length","map","key","Scroll","children","App","useState","robotList","setRobotList","setNewRobotList","useEffect","fetch","then","response","json","users","event","filter","toLowerCase","includes","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAceA,G,YAVG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAChB,OACI,6BACI,0BAAMC,UAAU,aACZ,2BAAOC,KAAK,SAASC,YAAY,0BAA0BC,SAAUJ,QCMtEK,G,MAVD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZ,OACI,yBAAKL,UAAU,SACX,yBAAKM,IAAG,+BAA0BD,EAAME,GAAhC,iBAAmDC,IAAI,UAC/D,4BAAKH,EAAMI,MACX,2BAAIJ,EAAMK,UCGPC,G,MAPG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OAAOA,EAAaC,OAAS,0BAAMb,UAAU,aACbY,EAAaE,KAAI,SAAAT,GAAK,OAAI,kBAAC,EAAD,CAAOA,MAAOA,EAAOU,IAAKV,EAAME,SAE7D,4CCGhBS,G,MARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,OACI,yBAAKjB,UAAU,UACViB,KCkCEC,MAnCf,WAAe,MAIqBC,mBAAS,IAJ9B,mBAINC,EAJM,KAIKC,EAJL,OAK2BF,mBAAS,IALpC,mBAKNP,EALM,KAKQU,EALR,KAsBb,OAdAC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,EAAaO,GACbN,EAAgBM,QAEjB,IAQD,kBAAC,WAAD,KACE,gCACE,4CAEF,kBAAC,EAAD,CAAW7B,YATK,SAAC8B,GACnBP,EAAgBF,EAAUU,QAAO,SAAAzB,GAAK,OAAIA,EAAMI,KAAKsB,cAAcC,SAASH,EAAMI,OAAOC,MAAMH,sBAS7F,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWnB,aAAcA,OCvBbuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.1e73ed4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './searchBox.css';\r\n\r\n//component to search for robots\r\nconst SearchBox = ({searchRobot}) => {\r\n    return (\r\n        <nav>\r\n            <form className=\"searchBox\">\r\n                <input type=\"search\" placeholder=\"Search robot by name...\" onChange={searchRobot}/>\r\n            </form>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './robot.css';\r\n\r\n//component to display the details of a single robot\r\nconst Robot = ({robot}) => {\r\n    return (\r\n        <div className=\"robot\">\r\n            <img src={`https://robohash.org/${robot.id}?size=200x200`} alt=\"robot\"/>\r\n            <h3>{robot.name}</h3>\r\n            <p>{robot.email}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Robot;","import React from 'react';\r\nimport Robot from '../robot/Robot';\r\nimport './robotList.css';\r\n\r\n//component to display the list of robots\r\nconst RobotList = ({newRobotList}) => {\r\n  return newRobotList.length ? <main className=\"robotList\">\r\n                                 {newRobotList.map(robot => <Robot robot={robot} key={robot.id}/>)}\r\n                               </main>\r\n                             : <h3>Loading...</h3>;\r\n};\r\n\r\nexport default RobotList;","import React from 'react';\r\nimport './scroll.css';\r\n\r\n//component to make its children components scrollable\r\nconst Scroll = ({children}) => {\r\n    return (\r\n        <div className=\"scroll\">\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {useState, useEffect, Fragment} from 'react';\nimport './App.css';\nimport SearchBox from './components/search_box/SearchBox';\nimport RobotList from './components/robot_list/RobotList';\nimport Scroll from './components/scroll/Scroll';\n\nfunction App() {\n\n  //setting the state of the component\n  //there are 2 arrays because we want to compare the two and display search results\n  const [robotList, setRobotList] = useState([]);\n  const [newRobotList, setNewRobotList] = useState([]);\n\n  //fetching json from an api once the component has mounted\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {\n      setRobotList(users);\n      setNewRobotList(users);\n    });\n  }, []);\n\n  //listener for the search event\n  const searchRobot = (event) => {\n    setNewRobotList(robotList.filter(robot => robot.name.toLowerCase().includes(event.target.value.toLowerCase())));\n  };\n\n  return (\n    <Fragment>\n      <header>\n        <h1>RoboFriends</h1>\n      </header>\n      <SearchBox searchRobot={searchRobot}/>\n      <Scroll>\n        <RobotList newRobotList={newRobotList}/>\n      </Scroll>\n    </Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}